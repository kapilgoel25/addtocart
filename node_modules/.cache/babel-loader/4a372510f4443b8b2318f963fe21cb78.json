{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Florent Cailhol @ooflorent\n*/\n\"use strict\";\n\nconst {\n  compareModulesByPreOrderIndexOrIdentifier\n} = require(\"../util/comparators\");\n\nconst {\n  assignAscendingModuleIds\n} = require(\"./IdHelpers\");\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @typedef {import(\"../Module\")} Module */\n\n\nclass NaturalModuleIdsPlugin {\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"NaturalModuleIdsPlugin\", compilation => {\n      compilation.hooks.moduleIds.tap(\"NaturalModuleIdsPlugin\", modules => {\n        const chunkGraph = compilation.chunkGraph;\n        const modulesInNaturalOrder = Array.from(modules).filter(m => m.needId && chunkGraph.getNumberOfModuleChunks(m) > 0 && chunkGraph.getModuleId(m) === null).sort(compareModulesByPreOrderIndexOrIdentifier(compilation.moduleGraph));\n        assignAscendingModuleIds(modulesInNaturalOrder, compilation);\n      });\n    });\n  }\n\n}\n\nmodule.exports = NaturalModuleIdsPlugin;","map":{"version":3,"sources":["E:/Coding/fixl solution/work1/addtocart/node_modules/webpack/lib/ids/NaturalModuleIdsPlugin.js"],"names":["compareModulesByPreOrderIndexOrIdentifier","require","assignAscendingModuleIds","NaturalModuleIdsPlugin","apply","compiler","hooks","compilation","tap","moduleIds","modules","chunkGraph","modulesInNaturalOrder","Array","from","filter","m","needId","getNumberOfModuleChunks","getModuleId","sort","moduleGraph","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAM;AACLA,EAAAA;AADK,IAEFC,OAAO,CAAC,qBAAD,CAFX;;AAGA,MAAM;AAAEC,EAAAA;AAAF,IAA+BD,OAAO,CAAC,aAAD,CAA5C;AAEA;;AACA;;;AAEA,MAAME,sBAAN,CAA6B;AAC5B;AACD;AACA;AACA;AACA;AACCC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+B,wBAA/B,EAAyDD,WAAW,IAAI;AACvEA,MAAAA,WAAW,CAACD,KAAZ,CAAkBG,SAAlB,CAA4BD,GAA5B,CAAgC,wBAAhC,EAA0DE,OAAO,IAAI;AACpE,cAAMC,UAAU,GAAGJ,WAAW,CAACI,UAA/B;AACA,cAAMC,qBAAqB,GAAGC,KAAK,CAACC,IAAN,CAAWJ,OAAX,EAC5BK,MAD4B,CAE5BC,CAAC,IACAA,CAAC,CAACC,MAAF,IACAN,UAAU,CAACO,uBAAX,CAAmCF,CAAnC,IAAwC,CADxC,IAEAL,UAAU,CAACQ,WAAX,CAAuBH,CAAvB,MAA8B,IALH,EAO5BI,IAP4B,CAQ5BpB,yCAAyC,CAACO,WAAW,CAACc,WAAb,CARb,CAA9B;AAUAnB,QAAAA,wBAAwB,CAACU,qBAAD,EAAwBL,WAAxB,CAAxB;AACA,OAbD;AAcA,KAfD;AAgBA;;AAvB2B;;AA0B7Be,MAAM,CAACC,OAAP,GAAiBpB,sBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Florent Cailhol @ooflorent\n*/\n\n\"use strict\";\n\nconst {\n\tcompareModulesByPreOrderIndexOrIdentifier\n} = require(\"../util/comparators\");\nconst { assignAscendingModuleIds } = require(\"./IdHelpers\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n\nclass NaturalModuleIdsPlugin {\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\"NaturalModuleIdsPlugin\", compilation => {\n\t\t\tcompilation.hooks.moduleIds.tap(\"NaturalModuleIdsPlugin\", modules => {\n\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\tconst modulesInNaturalOrder = Array.from(modules)\n\t\t\t\t\t.filter(\n\t\t\t\t\t\tm =>\n\t\t\t\t\t\t\tm.needId &&\n\t\t\t\t\t\t\tchunkGraph.getNumberOfModuleChunks(m) > 0 &&\n\t\t\t\t\t\t\tchunkGraph.getModuleId(m) === null\n\t\t\t\t\t)\n\t\t\t\t\t.sort(\n\t\t\t\t\t\tcompareModulesByPreOrderIndexOrIdentifier(compilation.moduleGraph)\n\t\t\t\t\t);\n\t\t\t\tassignAscendingModuleIds(modulesInNaturalOrder, compilation);\n\t\t\t});\n\t\t});\n\t}\n}\n\nmodule.exports = NaturalModuleIdsPlugin;\n"]},"metadata":{},"sourceType":"script"}