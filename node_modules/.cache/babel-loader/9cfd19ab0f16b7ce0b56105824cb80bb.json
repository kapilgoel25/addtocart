{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nexports.equals = (a, b) => {\n  if (a.length !== b.length) return false;\n\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) return false;\n  }\n\n  return true;\n};\n/**\n *\n * @param {Array} arr Array of values to be partitioned\n * @param {(value: any) => boolean} fn Partition function which partitions based on truthiness of result.\n * @returns {[Array, Array]} returns the values of `arr` partitioned into two new arrays based on fn predicate.\n */\n\n\nexports.groupBy = function () {\n  let arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let fn = arguments.length > 1 ? arguments[1] : undefined;\n  return arr.reduce((groups, value) => {\n    groups[fn(value) ? 0 : 1].push(value);\n    return groups;\n  }, [[], []]);\n};","map":{"version":3,"sources":["E:/Coding/fixl solution/work1/addtocart/node_modules/webpack/lib/util/ArrayHelpers.js"],"names":["exports","equals","a","b","length","i","groupBy","arr","fn","reduce","groups","value","push"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEAA,OAAO,CAACC,MAAR,GAAiB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC1B,MAAID,CAAC,CAACE,MAAF,KAAaD,CAAC,CAACC,MAAnB,EAA2B,OAAO,KAAP;;AAC3B,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,CAAC,CAACE,MAAtB,EAA8BC,CAAC,EAA/B,EAAmC;AAClC,QAAIH,CAAC,CAACG,CAAD,CAAD,KAASF,CAAC,CAACE,CAAD,CAAd,EAAmB,OAAO,KAAP;AACnB;;AACD,SAAO,IAAP;AACA,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;;;AACAL,OAAO,CAACM,OAAR,GAAkB,YAAkB;AAAA,MAAjBC,GAAiB,uEAAX,EAAW;AAAA,MAAPC,EAAO;AACnC,SAAOD,GAAG,CAACE,MAAJ,CACN,CAACC,MAAD,EAASC,KAAT,KAAmB;AAClBD,IAAAA,MAAM,CAACF,EAAE,CAACG,KAAD,CAAF,GAAY,CAAZ,GAAgB,CAAjB,CAAN,CAA0BC,IAA1B,CAA+BD,KAA/B;AACA,WAAOD,MAAP;AACA,GAJK,EAKN,CAAC,EAAD,EAAK,EAAL,CALM,CAAP;AAOA,CARD","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nexports.equals = (a, b) => {\n\tif (a.length !== b.length) return false;\n\tfor (let i = 0; i < a.length; i++) {\n\t\tif (a[i] !== b[i]) return false;\n\t}\n\treturn true;\n};\n\n/**\n *\n * @param {Array} arr Array of values to be partitioned\n * @param {(value: any) => boolean} fn Partition function which partitions based on truthiness of result.\n * @returns {[Array, Array]} returns the values of `arr` partitioned into two new arrays based on fn predicate.\n */\nexports.groupBy = (arr = [], fn) => {\n\treturn arr.reduce(\n\t\t(groups, value) => {\n\t\t\tgroups[fn(value) ? 0 : 1].push(value);\n\t\t\treturn groups;\n\t\t},\n\t\t[[], []]\n\t);\n};\n"]},"metadata":{},"sourceType":"script"}