{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  AsyncSeriesBailHook,\n  AsyncSeriesHook,\n  SyncHook\n} = require(\"tapable\");\n\nconst createInnerContext = require(\"./createInnerContext\");\n\nconst {\n  parseIdentifier\n} = require(\"./util/identifier\");\n\nconst {\n  normalize,\n  cachedJoin: join,\n  getType,\n  PathType\n} = require(\"./util/path\");\n/** @typedef {import(\"./ResolverFactory\").ResolveOptions} ResolveOptions */\n\n/**\n * @typedef {Object} FileSystemStats\n * @property {function(): boolean} isDirectory\n * @property {function(): boolean} isFile\n */\n\n/**\n * @typedef {Object} FileSystemDirent\n * @property {Buffer | string} name\n * @property {function(): boolean} isDirectory\n * @property {function(): boolean} isFile\n */\n\n/**\n * @typedef {Object} PossibleFileSystemError\n * @property {string=} code\n * @property {number=} errno\n * @property {string=} path\n * @property {string=} syscall\n */\n\n/**\n * @template T\n * @callback FileSystemCallback\n * @param {PossibleFileSystemError & Error | null | undefined} err\n * @param {T=} result\n */\n\n/**\n * @typedef {Object} FileSystem\n * @property {(function(string, FileSystemCallback<Buffer | string>): void) & function(string, object, FileSystemCallback<Buffer | string>): void} readFile\n * @property {(function(string, FileSystemCallback<(Buffer | string)[] | FileSystemDirent[]>): void) & function(string, object, FileSystemCallback<(Buffer | string)[] | FileSystemDirent[]>): void} readdir\n * @property {((function(string, FileSystemCallback<object>): void) & function(string, object, FileSystemCallback<object>): void)=} readJson\n * @property {(function(string, FileSystemCallback<Buffer | string>): void) & function(string, object, FileSystemCallback<Buffer | string>): void} readlink\n * @property {(function(string, FileSystemCallback<FileSystemStats>): void) & function(string, object, FileSystemCallback<Buffer | string>): void=} lstat\n * @property {(function(string, FileSystemCallback<FileSystemStats>): void) & function(string, object, FileSystemCallback<Buffer | string>): void} stat\n */\n\n/**\n * @typedef {Object} SyncFileSystem\n * @property {function(string, object=): Buffer | string} readFileSync\n * @property {function(string, object=): (Buffer | string)[] | FileSystemDirent[]} readdirSync\n * @property {(function(string, object=): object)=} readJsonSync\n * @property {function(string, object=): Buffer | string} readlinkSync\n * @property {function(string, object=): FileSystemStats=} lstatSync\n * @property {function(string, object=): FileSystemStats} statSync\n */\n\n/**\n * @typedef {Object} ParsedIdentifier\n * @property {string} request\n * @property {string} query\n * @property {string} fragment\n * @property {boolean} directory\n * @property {boolean} module\n * @property {boolean} file\n * @property {boolean} internal\n */\n\n/**\n * @typedef {Object} BaseResolveRequest\n * @property {string | false} path\n * @property {string=} descriptionFilePath\n * @property {string=} descriptionFileRoot\n * @property {object=} descriptionFileData\n * @property {string=} relativePath\n * @property {boolean=} ignoreSymlinks\n * @property {boolean=} fullySpecified\n */\n\n/** @typedef {BaseResolveRequest & Partial<ParsedIdentifier>} ResolveRequest */\n\n/**\n * String with special formatting\n * @typedef {string} StackEntry\n */\n\n/** @template T @typedef {{ add: (T) => void }} WriteOnlySet */\n\n/**\n * Resolve context\n * @typedef {Object} ResolveContext\n * @property {WriteOnlySet<string>=} contextDependencies\n * @property {WriteOnlySet<string>=} fileDependencies files that was found on file system\n * @property {WriteOnlySet<string>=} missingDependencies dependencies that was not found on file system\n * @property {Set<StackEntry>=} stack set of hooks' calls. For instance, `resolve → parsedResolve → describedResolve`,\n * @property {(function(string): void)=} log log function\n */\n\n/** @typedef {AsyncSeriesBailHook<[ResolveRequest, ResolveContext], ResolveRequest | null>} ResolveStepHook */\n\n/**\n * @param {string} str input string\n * @returns {string} in camel case\n */\n\n\nfunction toCamelCase(str) {\n  return str.replace(/-([a-z])/g, str => str.substr(1).toUpperCase());\n}\n\nclass Resolver {\n  /**\n   * @param {ResolveStepHook} hook hook\n   * @param {ResolveRequest} request request\n   * @returns {StackEntry} stack entry\n   */\n  static createStackEntry(hook, request) {\n    return hook.name + \": (\" + request.path + \") \" + (request.request || \"\") + (request.query || \"\") + (request.fragment || \"\") + (request.directory ? \" directory\" : \"\") + (request.module ? \" module\" : \"\");\n  }\n  /**\n   * @param {FileSystem} fileSystem a filesystem\n   * @param {ResolveOptions} options options\n   */\n\n\n  constructor(fileSystem, options) {\n    this.fileSystem = fileSystem;\n    this.options = options;\n    this.hooks = {\n      /** @type {SyncHook<[ResolveStepHook, ResolveRequest], void>} */\n      resolveStep: new SyncHook([\"hook\", \"request\"], \"resolveStep\"),\n\n      /** @type {SyncHook<[ResolveRequest, Error]>} */\n      noResolve: new SyncHook([\"request\", \"error\"], \"noResolve\"),\n\n      /** @type {ResolveStepHook} */\n      resolve: new AsyncSeriesBailHook([\"request\", \"resolveContext\"], \"resolve\"),\n\n      /** @type {AsyncSeriesHook<[ResolveRequest, ResolveContext]>} */\n      result: new AsyncSeriesHook([\"result\", \"resolveContext\"], \"result\")\n    };\n  }\n  /**\n   * @param {string | ResolveStepHook} name hook name or hook itself\n   * @returns {ResolveStepHook} the hook\n   */\n\n\n  ensureHook(name) {\n    if (typeof name !== \"string\") {\n      return name;\n    }\n\n    name = toCamelCase(name);\n\n    if (/^before/.test(name)) {\n      return (\n        /** @type {ResolveStepHook} */\n        this.ensureHook(name[6].toLowerCase() + name.substr(7)).withOptions({\n          stage: -10\n        })\n      );\n    }\n\n    if (/^after/.test(name)) {\n      return (\n        /** @type {ResolveStepHook} */\n        this.ensureHook(name[5].toLowerCase() + name.substr(6)).withOptions({\n          stage: 10\n        })\n      );\n    }\n\n    const hook = this.hooks[name];\n\n    if (!hook) {\n      return this.hooks[name] = new AsyncSeriesBailHook([\"request\", \"resolveContext\"], name);\n    }\n\n    return hook;\n  }\n  /**\n   * @param {string | ResolveStepHook} name hook name or hook itself\n   * @returns {ResolveStepHook} the hook\n   */\n\n\n  getHook(name) {\n    if (typeof name !== \"string\") {\n      return name;\n    }\n\n    name = toCamelCase(name);\n\n    if (/^before/.test(name)) {\n      return (\n        /** @type {ResolveStepHook} */\n        this.getHook(name[6].toLowerCase() + name.substr(7)).withOptions({\n          stage: -10\n        })\n      );\n    }\n\n    if (/^after/.test(name)) {\n      return (\n        /** @type {ResolveStepHook} */\n        this.getHook(name[5].toLowerCase() + name.substr(6)).withOptions({\n          stage: 10\n        })\n      );\n    }\n\n    const hook = this.hooks[name];\n\n    if (!hook) {\n      throw new Error(`Hook ${name} doesn't exist`);\n    }\n\n    return hook;\n  }\n  /**\n   * @param {object} context context information object\n   * @param {string} path context path\n   * @param {string} request request string\n   * @returns {string | false} result\n   */\n\n\n  resolveSync(context, path, request) {\n    /** @type {Error | null | undefined} */\n    let err = undefined;\n    /** @type {string | false | undefined} */\n\n    let result = undefined;\n    let sync = false;\n    this.resolve(context, path, request, {}, (e, r) => {\n      err = e;\n      result = r;\n      sync = true;\n    });\n\n    if (!sync) {\n      throw new Error(\"Cannot 'resolveSync' because the fileSystem is not sync. Use 'resolve'!\");\n    }\n\n    if (err) throw err;\n    if (result === undefined) throw new Error(\"No result\");\n    return result;\n  }\n  /**\n   * @param {object} context context information object\n   * @param {string} path context path\n   * @param {string} request request string\n   * @param {ResolveContext} resolveContext resolve context\n   * @param {function(Error | null, (string|false)=, ResolveRequest=): void} callback callback function\n   * @returns {void}\n   */\n\n\n  resolve(context, path, request, resolveContext, callback) {\n    if (!context || typeof context !== \"object\") return callback(new Error(\"context argument is not an object\"));\n    if (typeof path !== \"string\") return callback(new Error(\"path argument is not a string\"));\n    if (typeof request !== \"string\") return callback(new Error(\"path argument is not a string\"));\n    if (!resolveContext) return callback(new Error(\"resolveContext argument is not set\"));\n    const obj = {\n      context: context,\n      path: path,\n      request: request\n    };\n    const message = `resolve '${request}' in '${path}'`;\n\n    const finishResolved = result => {\n      return callback(null, result.path === false ? false : `${result.path.replace(/#/g, \"\\0#\")}${result.query ? result.query.replace(/#/g, \"\\0#\") : \"\"}${result.fragment || \"\"}`, result);\n    };\n\n    const finishWithoutResolve = log => {\n      /**\n       * @type {Error & {details?: string}}\n       */\n      const error = new Error(\"Can't \" + message);\n      error.details = log.join(\"\\n\");\n      this.hooks.noResolve.call(obj, error);\n      return callback(error);\n    };\n\n    if (resolveContext.log) {\n      // We need log anyway to capture it in case of an error\n      const parentLog = resolveContext.log;\n      const log = [];\n      return this.doResolve(this.hooks.resolve, obj, message, {\n        log: msg => {\n          parentLog(msg);\n          log.push(msg);\n        },\n        fileDependencies: resolveContext.fileDependencies,\n        contextDependencies: resolveContext.contextDependencies,\n        missingDependencies: resolveContext.missingDependencies,\n        stack: resolveContext.stack\n      }, (err, result) => {\n        if (err) return callback(err);\n        if (result) return finishResolved(result);\n        return finishWithoutResolve(log);\n      });\n    } else {\n      // Try to resolve assuming there is no error\n      // We don't log stuff in this case\n      return this.doResolve(this.hooks.resolve, obj, message, {\n        log: undefined,\n        fileDependencies: resolveContext.fileDependencies,\n        contextDependencies: resolveContext.contextDependencies,\n        missingDependencies: resolveContext.missingDependencies,\n        stack: resolveContext.stack\n      }, (err, result) => {\n        if (err) return callback(err);\n        if (result) return finishResolved(result); // log is missing for the error details\n        // so we redo the resolving for the log info\n        // this is more expensive to the success case\n        // is assumed by default\n\n        const log = [];\n        return this.doResolve(this.hooks.resolve, obj, message, {\n          log: msg => log.push(msg),\n          stack: resolveContext.stack\n        }, (err, result) => {\n          if (err) return callback(err);\n          return finishWithoutResolve(log);\n        });\n      });\n    }\n  }\n\n  doResolve(hook, request, message, resolveContext, callback) {\n    const stackEntry = Resolver.createStackEntry(hook, request);\n    let newStack;\n\n    if (resolveContext.stack) {\n      newStack = new Set(resolveContext.stack);\n\n      if (resolveContext.stack.has(stackEntry)) {\n        /**\n         * Prevent recursion\n         * @type {Error & {recursion?: boolean}}\n         */\n        const recursionError = new Error(\"Recursion in resolving\\nStack:\\n  \" + Array.from(newStack).join(\"\\n  \"));\n        recursionError.recursion = true;\n        if (resolveContext.log) resolveContext.log(\"abort resolving because of recursion\");\n        return callback(recursionError);\n      }\n\n      newStack.add(stackEntry);\n    } else {\n      newStack = new Set([stackEntry]);\n    }\n\n    this.hooks.resolveStep.call(hook, request);\n\n    if (hook.isUsed()) {\n      const innerContext = createInnerContext({\n        log: resolveContext.log,\n        fileDependencies: resolveContext.fileDependencies,\n        contextDependencies: resolveContext.contextDependencies,\n        missingDependencies: resolveContext.missingDependencies,\n        stack: newStack\n      }, message);\n      return hook.callAsync(request, innerContext, (err, result) => {\n        if (err) return callback(err);\n        if (result) return callback(null, result);\n        callback();\n      });\n    } else {\n      callback();\n    }\n  }\n  /**\n   * @param {string} identifier identifier\n   * @returns {ParsedIdentifier} parsed identifier\n   */\n\n\n  parse(identifier) {\n    const part = {\n      request: \"\",\n      query: \"\",\n      fragment: \"\",\n      module: false,\n      directory: false,\n      file: false,\n      internal: false\n    };\n    const parsedIdentifier = parseIdentifier(identifier);\n    if (!parsedIdentifier) return part;\n    [part.request, part.query, part.fragment] = parsedIdentifier;\n\n    if (part.request.length > 0) {\n      part.internal = this.isPrivate(identifier);\n      part.module = this.isModule(part.request);\n      part.directory = this.isDirectory(part.request);\n\n      if (part.directory) {\n        part.request = part.request.substr(0, part.request.length - 1);\n      }\n    }\n\n    return part;\n  }\n\n  isModule(path) {\n    return getType(path) === PathType.Normal;\n  }\n\n  isPrivate(path) {\n    return getType(path) === PathType.Internal;\n  }\n  /**\n   * @param {string} path a path\n   * @returns {boolean} true, if the path is a directory path\n   */\n\n\n  isDirectory(path) {\n    return path.endsWith(\"/\");\n  }\n\n  join(path, request) {\n    return join(path, request);\n  }\n\n  normalize(path) {\n    return normalize(path);\n  }\n\n}\n\nmodule.exports = Resolver;","map":{"version":3,"sources":["E:/Coding/fixl solution/work1/addtocart/node_modules/enhanced-resolve/lib/Resolver.js"],"names":["AsyncSeriesBailHook","AsyncSeriesHook","SyncHook","require","createInnerContext","parseIdentifier","normalize","cachedJoin","join","getType","PathType","toCamelCase","str","replace","substr","toUpperCase","Resolver","createStackEntry","hook","request","name","path","query","fragment","directory","module","constructor","fileSystem","options","hooks","resolveStep","noResolve","resolve","result","ensureHook","test","toLowerCase","withOptions","stage","getHook","Error","resolveSync","context","err","undefined","sync","e","r","resolveContext","callback","obj","message","finishResolved","finishWithoutResolve","log","error","details","call","parentLog","doResolve","msg","push","fileDependencies","contextDependencies","missingDependencies","stack","stackEntry","newStack","Set","has","recursionError","Array","from","recursion","add","isUsed","innerContext","callAsync","parse","identifier","part","file","internal","parsedIdentifier","length","isPrivate","isModule","isDirectory","Normal","Internal","endsWith","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { AsyncSeriesBailHook, AsyncSeriesHook, SyncHook } = require(\"tapable\");\nconst createInnerContext = require(\"./createInnerContext\");\nconst { parseIdentifier } = require(\"./util/identifier\");\nconst {\n\tnormalize,\n\tcachedJoin: join,\n\tgetType,\n\tPathType\n} = require(\"./util/path\");\n\n/** @typedef {import(\"./ResolverFactory\").ResolveOptions} ResolveOptions */\n\n/**\n * @typedef {Object} FileSystemStats\n * @property {function(): boolean} isDirectory\n * @property {function(): boolean} isFile\n */\n\n/**\n * @typedef {Object} FileSystemDirent\n * @property {Buffer | string} name\n * @property {function(): boolean} isDirectory\n * @property {function(): boolean} isFile\n */\n\n/**\n * @typedef {Object} PossibleFileSystemError\n * @property {string=} code\n * @property {number=} errno\n * @property {string=} path\n * @property {string=} syscall\n */\n\n/**\n * @template T\n * @callback FileSystemCallback\n * @param {PossibleFileSystemError & Error | null | undefined} err\n * @param {T=} result\n */\n\n/**\n * @typedef {Object} FileSystem\n * @property {(function(string, FileSystemCallback<Buffer | string>): void) & function(string, object, FileSystemCallback<Buffer | string>): void} readFile\n * @property {(function(string, FileSystemCallback<(Buffer | string)[] | FileSystemDirent[]>): void) & function(string, object, FileSystemCallback<(Buffer | string)[] | FileSystemDirent[]>): void} readdir\n * @property {((function(string, FileSystemCallback<object>): void) & function(string, object, FileSystemCallback<object>): void)=} readJson\n * @property {(function(string, FileSystemCallback<Buffer | string>): void) & function(string, object, FileSystemCallback<Buffer | string>): void} readlink\n * @property {(function(string, FileSystemCallback<FileSystemStats>): void) & function(string, object, FileSystemCallback<Buffer | string>): void=} lstat\n * @property {(function(string, FileSystemCallback<FileSystemStats>): void) & function(string, object, FileSystemCallback<Buffer | string>): void} stat\n */\n\n/**\n * @typedef {Object} SyncFileSystem\n * @property {function(string, object=): Buffer | string} readFileSync\n * @property {function(string, object=): (Buffer | string)[] | FileSystemDirent[]} readdirSync\n * @property {(function(string, object=): object)=} readJsonSync\n * @property {function(string, object=): Buffer | string} readlinkSync\n * @property {function(string, object=): FileSystemStats=} lstatSync\n * @property {function(string, object=): FileSystemStats} statSync\n */\n\n/**\n * @typedef {Object} ParsedIdentifier\n * @property {string} request\n * @property {string} query\n * @property {string} fragment\n * @property {boolean} directory\n * @property {boolean} module\n * @property {boolean} file\n * @property {boolean} internal\n */\n\n/**\n * @typedef {Object} BaseResolveRequest\n * @property {string | false} path\n * @property {string=} descriptionFilePath\n * @property {string=} descriptionFileRoot\n * @property {object=} descriptionFileData\n * @property {string=} relativePath\n * @property {boolean=} ignoreSymlinks\n * @property {boolean=} fullySpecified\n */\n\n/** @typedef {BaseResolveRequest & Partial<ParsedIdentifier>} ResolveRequest */\n\n/**\n * String with special formatting\n * @typedef {string} StackEntry\n */\n\n/** @template T @typedef {{ add: (T) => void }} WriteOnlySet */\n\n/**\n * Resolve context\n * @typedef {Object} ResolveContext\n * @property {WriteOnlySet<string>=} contextDependencies\n * @property {WriteOnlySet<string>=} fileDependencies files that was found on file system\n * @property {WriteOnlySet<string>=} missingDependencies dependencies that was not found on file system\n * @property {Set<StackEntry>=} stack set of hooks' calls. For instance, `resolve → parsedResolve → describedResolve`,\n * @property {(function(string): void)=} log log function\n */\n\n/** @typedef {AsyncSeriesBailHook<[ResolveRequest, ResolveContext], ResolveRequest | null>} ResolveStepHook */\n\n/**\n * @param {string} str input string\n * @returns {string} in camel case\n */\nfunction toCamelCase(str) {\n\treturn str.replace(/-([a-z])/g, str => str.substr(1).toUpperCase());\n}\n\nclass Resolver {\n\t/**\n\t * @param {ResolveStepHook} hook hook\n\t * @param {ResolveRequest} request request\n\t * @returns {StackEntry} stack entry\n\t */\n\tstatic createStackEntry(hook, request) {\n\t\treturn (\n\t\t\thook.name +\n\t\t\t\": (\" +\n\t\t\trequest.path +\n\t\t\t\") \" +\n\t\t\t(request.request || \"\") +\n\t\t\t(request.query || \"\") +\n\t\t\t(request.fragment || \"\") +\n\t\t\t(request.directory ? \" directory\" : \"\") +\n\t\t\t(request.module ? \" module\" : \"\")\n\t\t);\n\t}\n\n\t/**\n\t * @param {FileSystem} fileSystem a filesystem\n\t * @param {ResolveOptions} options options\n\t */\n\tconstructor(fileSystem, options) {\n\t\tthis.fileSystem = fileSystem;\n\t\tthis.options = options;\n\t\tthis.hooks = {\n\t\t\t/** @type {SyncHook<[ResolveStepHook, ResolveRequest], void>} */\n\t\t\tresolveStep: new SyncHook([\"hook\", \"request\"], \"resolveStep\"),\n\t\t\t/** @type {SyncHook<[ResolveRequest, Error]>} */\n\t\t\tnoResolve: new SyncHook([\"request\", \"error\"], \"noResolve\"),\n\t\t\t/** @type {ResolveStepHook} */\n\t\t\tresolve: new AsyncSeriesBailHook(\n\t\t\t\t[\"request\", \"resolveContext\"],\n\t\t\t\t\"resolve\"\n\t\t\t),\n\t\t\t/** @type {AsyncSeriesHook<[ResolveRequest, ResolveContext]>} */\n\t\t\tresult: new AsyncSeriesHook([\"result\", \"resolveContext\"], \"result\")\n\t\t};\n\t}\n\n\t/**\n\t * @param {string | ResolveStepHook} name hook name or hook itself\n\t * @returns {ResolveStepHook} the hook\n\t */\n\tensureHook(name) {\n\t\tif (typeof name !== \"string\") {\n\t\t\treturn name;\n\t\t}\n\t\tname = toCamelCase(name);\n\t\tif (/^before/.test(name)) {\n\t\t\treturn /** @type {ResolveStepHook} */ (this.ensureHook(\n\t\t\t\tname[6].toLowerCase() + name.substr(7)\n\t\t\t).withOptions({\n\t\t\t\tstage: -10\n\t\t\t}));\n\t\t}\n\t\tif (/^after/.test(name)) {\n\t\t\treturn /** @type {ResolveStepHook} */ (this.ensureHook(\n\t\t\t\tname[5].toLowerCase() + name.substr(6)\n\t\t\t).withOptions({\n\t\t\t\tstage: 10\n\t\t\t}));\n\t\t}\n\t\tconst hook = this.hooks[name];\n\t\tif (!hook) {\n\t\t\treturn (this.hooks[name] = new AsyncSeriesBailHook(\n\t\t\t\t[\"request\", \"resolveContext\"],\n\t\t\t\tname\n\t\t\t));\n\t\t}\n\t\treturn hook;\n\t}\n\n\t/**\n\t * @param {string | ResolveStepHook} name hook name or hook itself\n\t * @returns {ResolveStepHook} the hook\n\t */\n\tgetHook(name) {\n\t\tif (typeof name !== \"string\") {\n\t\t\treturn name;\n\t\t}\n\t\tname = toCamelCase(name);\n\t\tif (/^before/.test(name)) {\n\t\t\treturn /** @type {ResolveStepHook} */ (this.getHook(\n\t\t\t\tname[6].toLowerCase() + name.substr(7)\n\t\t\t).withOptions({\n\t\t\t\tstage: -10\n\t\t\t}));\n\t\t}\n\t\tif (/^after/.test(name)) {\n\t\t\treturn /** @type {ResolveStepHook} */ (this.getHook(\n\t\t\t\tname[5].toLowerCase() + name.substr(6)\n\t\t\t).withOptions({\n\t\t\t\tstage: 10\n\t\t\t}));\n\t\t}\n\t\tconst hook = this.hooks[name];\n\t\tif (!hook) {\n\t\t\tthrow new Error(`Hook ${name} doesn't exist`);\n\t\t}\n\t\treturn hook;\n\t}\n\n\t/**\n\t * @param {object} context context information object\n\t * @param {string} path context path\n\t * @param {string} request request string\n\t * @returns {string | false} result\n\t */\n\tresolveSync(context, path, request) {\n\t\t/** @type {Error | null | undefined} */\n\t\tlet err = undefined;\n\t\t/** @type {string | false | undefined} */\n\t\tlet result = undefined;\n\t\tlet sync = false;\n\t\tthis.resolve(context, path, request, {}, (e, r) => {\n\t\t\terr = e;\n\t\t\tresult = r;\n\t\t\tsync = true;\n\t\t});\n\t\tif (!sync) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Cannot 'resolveSync' because the fileSystem is not sync. Use 'resolve'!\"\n\t\t\t);\n\t\t}\n\t\tif (err) throw err;\n\t\tif (result === undefined) throw new Error(\"No result\");\n\t\treturn result;\n\t}\n\n\t/**\n\t * @param {object} context context information object\n\t * @param {string} path context path\n\t * @param {string} request request string\n\t * @param {ResolveContext} resolveContext resolve context\n\t * @param {function(Error | null, (string|false)=, ResolveRequest=): void} callback callback function\n\t * @returns {void}\n\t */\n\tresolve(context, path, request, resolveContext, callback) {\n\t\tif (!context || typeof context !== \"object\")\n\t\t\treturn callback(new Error(\"context argument is not an object\"));\n\t\tif (typeof path !== \"string\")\n\t\t\treturn callback(new Error(\"path argument is not a string\"));\n\t\tif (typeof request !== \"string\")\n\t\t\treturn callback(new Error(\"path argument is not a string\"));\n\t\tif (!resolveContext)\n\t\t\treturn callback(new Error(\"resolveContext argument is not set\"));\n\n\t\tconst obj = {\n\t\t\tcontext: context,\n\t\t\tpath: path,\n\t\t\trequest: request\n\t\t};\n\n\t\tconst message = `resolve '${request}' in '${path}'`;\n\n\t\tconst finishResolved = result => {\n\t\t\treturn callback(\n\t\t\t\tnull,\n\t\t\t\tresult.path === false\n\t\t\t\t\t? false\n\t\t\t\t\t: `${result.path.replace(/#/g, \"\\0#\")}${\n\t\t\t\t\t\t\tresult.query ? result.query.replace(/#/g, \"\\0#\") : \"\"\n\t\t\t\t\t  }${result.fragment || \"\"}`,\n\t\t\t\tresult\n\t\t\t);\n\t\t};\n\n\t\tconst finishWithoutResolve = log => {\n\t\t\t/**\n\t\t\t * @type {Error & {details?: string}}\n\t\t\t */\n\t\t\tconst error = new Error(\"Can't \" + message);\n\t\t\terror.details = log.join(\"\\n\");\n\t\t\tthis.hooks.noResolve.call(obj, error);\n\t\t\treturn callback(error);\n\t\t};\n\n\t\tif (resolveContext.log) {\n\t\t\t// We need log anyway to capture it in case of an error\n\t\t\tconst parentLog = resolveContext.log;\n\t\t\tconst log = [];\n\t\t\treturn this.doResolve(\n\t\t\t\tthis.hooks.resolve,\n\t\t\t\tobj,\n\t\t\t\tmessage,\n\t\t\t\t{\n\t\t\t\t\tlog: msg => {\n\t\t\t\t\t\tparentLog(msg);\n\t\t\t\t\t\tlog.push(msg);\n\t\t\t\t\t},\n\t\t\t\t\tfileDependencies: resolveContext.fileDependencies,\n\t\t\t\t\tcontextDependencies: resolveContext.contextDependencies,\n\t\t\t\t\tmissingDependencies: resolveContext.missingDependencies,\n\t\t\t\t\tstack: resolveContext.stack\n\t\t\t\t},\n\t\t\t\t(err, result) => {\n\t\t\t\t\tif (err) return callback(err);\n\n\t\t\t\t\tif (result) return finishResolved(result);\n\n\t\t\t\t\treturn finishWithoutResolve(log);\n\t\t\t\t}\n\t\t\t);\n\t\t} else {\n\t\t\t// Try to resolve assuming there is no error\n\t\t\t// We don't log stuff in this case\n\t\t\treturn this.doResolve(\n\t\t\t\tthis.hooks.resolve,\n\t\t\t\tobj,\n\t\t\t\tmessage,\n\t\t\t\t{\n\t\t\t\t\tlog: undefined,\n\t\t\t\t\tfileDependencies: resolveContext.fileDependencies,\n\t\t\t\t\tcontextDependencies: resolveContext.contextDependencies,\n\t\t\t\t\tmissingDependencies: resolveContext.missingDependencies,\n\t\t\t\t\tstack: resolveContext.stack\n\t\t\t\t},\n\t\t\t\t(err, result) => {\n\t\t\t\t\tif (err) return callback(err);\n\n\t\t\t\t\tif (result) return finishResolved(result);\n\n\t\t\t\t\t// log is missing for the error details\n\t\t\t\t\t// so we redo the resolving for the log info\n\t\t\t\t\t// this is more expensive to the success case\n\t\t\t\t\t// is assumed by default\n\n\t\t\t\t\tconst log = [];\n\n\t\t\t\t\treturn this.doResolve(\n\t\t\t\t\t\tthis.hooks.resolve,\n\t\t\t\t\t\tobj,\n\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlog: msg => log.push(msg),\n\t\t\t\t\t\t\tstack: resolveContext.stack\n\t\t\t\t\t\t},\n\t\t\t\t\t\t(err, result) => {\n\t\t\t\t\t\t\tif (err) return callback(err);\n\n\t\t\t\t\t\t\treturn finishWithoutResolve(log);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n\n\tdoResolve(hook, request, message, resolveContext, callback) {\n\t\tconst stackEntry = Resolver.createStackEntry(hook, request);\n\n\t\tlet newStack;\n\t\tif (resolveContext.stack) {\n\t\t\tnewStack = new Set(resolveContext.stack);\n\t\t\tif (resolveContext.stack.has(stackEntry)) {\n\t\t\t\t/**\n\t\t\t\t * Prevent recursion\n\t\t\t\t * @type {Error & {recursion?: boolean}}\n\t\t\t\t */\n\t\t\t\tconst recursionError = new Error(\n\t\t\t\t\t\"Recursion in resolving\\nStack:\\n  \" +\n\t\t\t\t\t\tArray.from(newStack).join(\"\\n  \")\n\t\t\t\t);\n\t\t\t\trecursionError.recursion = true;\n\t\t\t\tif (resolveContext.log)\n\t\t\t\t\tresolveContext.log(\"abort resolving because of recursion\");\n\t\t\t\treturn callback(recursionError);\n\t\t\t}\n\t\t\tnewStack.add(stackEntry);\n\t\t} else {\n\t\t\tnewStack = new Set([stackEntry]);\n\t\t}\n\t\tthis.hooks.resolveStep.call(hook, request);\n\n\t\tif (hook.isUsed()) {\n\t\t\tconst innerContext = createInnerContext(\n\t\t\t\t{\n\t\t\t\t\tlog: resolveContext.log,\n\t\t\t\t\tfileDependencies: resolveContext.fileDependencies,\n\t\t\t\t\tcontextDependencies: resolveContext.contextDependencies,\n\t\t\t\t\tmissingDependencies: resolveContext.missingDependencies,\n\t\t\t\t\tstack: newStack\n\t\t\t\t},\n\t\t\t\tmessage\n\t\t\t);\n\t\t\treturn hook.callAsync(request, innerContext, (err, result) => {\n\t\t\t\tif (err) return callback(err);\n\t\t\t\tif (result) return callback(null, result);\n\t\t\t\tcallback();\n\t\t\t});\n\t\t} else {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} identifier identifier\n\t * @returns {ParsedIdentifier} parsed identifier\n\t */\n\tparse(identifier) {\n\t\tconst part = {\n\t\t\trequest: \"\",\n\t\t\tquery: \"\",\n\t\t\tfragment: \"\",\n\t\t\tmodule: false,\n\t\t\tdirectory: false,\n\t\t\tfile: false,\n\t\t\tinternal: false\n\t\t};\n\n\t\tconst parsedIdentifier = parseIdentifier(identifier);\n\n\t\tif (!parsedIdentifier) return part;\n\n\t\t[part.request, part.query, part.fragment] = parsedIdentifier;\n\n\t\tif (part.request.length > 0) {\n\t\t\tpart.internal = this.isPrivate(identifier);\n\t\t\tpart.module = this.isModule(part.request);\n\t\t\tpart.directory = this.isDirectory(part.request);\n\t\t\tif (part.directory) {\n\t\t\t\tpart.request = part.request.substr(0, part.request.length - 1);\n\t\t\t}\n\t\t}\n\n\t\treturn part;\n\t}\n\n\tisModule(path) {\n\t\treturn getType(path) === PathType.Normal;\n\t}\n\n\tisPrivate(path) {\n\t\treturn getType(path) === PathType.Internal;\n\t}\n\n\t/**\n\t * @param {string} path a path\n\t * @returns {boolean} true, if the path is a directory path\n\t */\n\tisDirectory(path) {\n\t\treturn path.endsWith(\"/\");\n\t}\n\n\tjoin(path, request) {\n\t\treturn join(path, request);\n\t}\n\n\tnormalize(path) {\n\t\treturn normalize(path);\n\t}\n}\n\nmodule.exports = Resolver;\n"]},"metadata":{},"sourceType":"script"}