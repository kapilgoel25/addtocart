{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Florent Cailhol @ooflorent\n*/\n\"use strict\";\n\nconst {\n  compareModulesByPreOrderIndexOrIdentifier\n} = require(\"../util/comparators\");\n\nconst {\n  getUsedModuleIds,\n  getFullModuleName,\n  assignDeterministicIds\n} = require(\"./IdHelpers\");\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @typedef {import(\"../Module\")} Module */\n\n\nclass DeterministicModuleIdsPlugin {\n  constructor(options) {\n    this.options = options || {};\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"DeterministicModuleIdsPlugin\", compilation => {\n      compilation.hooks.moduleIds.tap(\"DeterministicModuleIdsPlugin\", modules => {\n        const chunkGraph = compilation.chunkGraph;\n        const context = this.options.context ? this.options.context : compiler.context;\n        const maxLength = this.options.maxLength || 3;\n        const usedIds = getUsedModuleIds(compilation);\n        assignDeterministicIds(Array.from(modules).filter(module => {\n          if (!module.needId) return false;\n          if (chunkGraph.getNumberOfModuleChunks(module) === 0) return false;\n          return chunkGraph.getModuleId(module) === null;\n        }), module => getFullModuleName(module, context, compiler.root), compareModulesByPreOrderIndexOrIdentifier(compilation.moduleGraph), (module, id) => {\n          const size = usedIds.size;\n          usedIds.add(`${id}`);\n          if (size === usedIds.size) return false;\n          chunkGraph.setModuleId(module, id);\n          return true;\n        }, [Math.pow(10, maxLength)], 10, usedIds.size);\n      });\n    });\n  }\n\n}\n\nmodule.exports = DeterministicModuleIdsPlugin;","map":{"version":3,"sources":["E:/Coding/fixl solution/work1/addtocart/node_modules/webpack/lib/ids/DeterministicModuleIdsPlugin.js"],"names":["compareModulesByPreOrderIndexOrIdentifier","require","getUsedModuleIds","getFullModuleName","assignDeterministicIds","DeterministicModuleIdsPlugin","constructor","options","apply","compiler","hooks","compilation","tap","moduleIds","modules","chunkGraph","context","maxLength","usedIds","Array","from","filter","module","needId","getNumberOfModuleChunks","getModuleId","root","moduleGraph","id","size","add","setModuleId","Math","pow","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAM;AACLA,EAAAA;AADK,IAEFC,OAAO,CAAC,qBAAD,CAFX;;AAGA,MAAM;AACLC,EAAAA,gBADK;AAELC,EAAAA,iBAFK;AAGLC,EAAAA;AAHK,IAIFH,OAAO,CAAC,aAAD,CAJX;AAMA;;AACA;;;AAEA,MAAMI,4BAAN,CAAmC;AAClCC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACpB,SAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CACC,8BADD,EAECD,WAAW,IAAI;AACdA,MAAAA,WAAW,CAACD,KAAZ,CAAkBG,SAAlB,CAA4BD,GAA5B,CACC,8BADD,EAECE,OAAO,IAAI;AACV,cAAMC,UAAU,GAAGJ,WAAW,CAACI,UAA/B;AACA,cAAMC,OAAO,GAAG,KAAKT,OAAL,CAAaS,OAAb,GACb,KAAKT,OAAL,CAAaS,OADA,GAEbP,QAAQ,CAACO,OAFZ;AAGA,cAAMC,SAAS,GAAG,KAAKV,OAAL,CAAaU,SAAb,IAA0B,CAA5C;AAEA,cAAMC,OAAO,GAAGhB,gBAAgB,CAACS,WAAD,CAAhC;AACAP,QAAAA,sBAAsB,CACrBe,KAAK,CAACC,IAAN,CAAWN,OAAX,EAAoBO,MAApB,CAA2BC,MAAM,IAAI;AACpC,cAAI,CAACA,MAAM,CAACC,MAAZ,EAAoB,OAAO,KAAP;AACpB,cAAIR,UAAU,CAACS,uBAAX,CAAmCF,MAAnC,MAA+C,CAAnD,EACC,OAAO,KAAP;AACD,iBAAOP,UAAU,CAACU,WAAX,CAAuBH,MAAvB,MAAmC,IAA1C;AACA,SALD,CADqB,EAOrBA,MAAM,IAAInB,iBAAiB,CAACmB,MAAD,EAASN,OAAT,EAAkBP,QAAQ,CAACiB,IAA3B,CAPN,EAQrB1B,yCAAyC,CACxCW,WAAW,CAACgB,WAD4B,CARpB,EAWrB,CAACL,MAAD,EAASM,EAAT,KAAgB;AACf,gBAAMC,IAAI,GAAGX,OAAO,CAACW,IAArB;AACAX,UAAAA,OAAO,CAACY,GAAR,CAAa,GAAEF,EAAG,EAAlB;AACA,cAAIC,IAAI,KAAKX,OAAO,CAACW,IAArB,EAA2B,OAAO,KAAP;AAC3Bd,UAAAA,UAAU,CAACgB,WAAX,CAAuBT,MAAvB,EAA+BM,EAA/B;AACA,iBAAO,IAAP;AACA,SAjBoB,EAkBrB,CAACI,IAAI,CAACC,GAAL,CAAS,EAAT,EAAahB,SAAb,CAAD,CAlBqB,EAmBrB,EAnBqB,EAoBrBC,OAAO,CAACW,IApBa,CAAtB;AAsBA,OAhCF;AAkCA,KArCF;AAuCA;;AAlDiC;;AAqDnCP,MAAM,CAACY,OAAP,GAAiB7B,4BAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Florent Cailhol @ooflorent\n*/\n\n\"use strict\";\n\nconst {\n\tcompareModulesByPreOrderIndexOrIdentifier\n} = require(\"../util/comparators\");\nconst {\n\tgetUsedModuleIds,\n\tgetFullModuleName,\n\tassignDeterministicIds\n} = require(\"./IdHelpers\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n\nclass DeterministicModuleIdsPlugin {\n\tconstructor(options) {\n\t\tthis.options = options || {};\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"DeterministicModuleIdsPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tcompilation.hooks.moduleIds.tap(\n\t\t\t\t\t\"DeterministicModuleIdsPlugin\",\n\t\t\t\t\tmodules => {\n\t\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\t\t\tconst context = this.options.context\n\t\t\t\t\t\t\t? this.options.context\n\t\t\t\t\t\t\t: compiler.context;\n\t\t\t\t\t\tconst maxLength = this.options.maxLength || 3;\n\n\t\t\t\t\t\tconst usedIds = getUsedModuleIds(compilation);\n\t\t\t\t\t\tassignDeterministicIds(\n\t\t\t\t\t\t\tArray.from(modules).filter(module => {\n\t\t\t\t\t\t\t\tif (!module.needId) return false;\n\t\t\t\t\t\t\t\tif (chunkGraph.getNumberOfModuleChunks(module) === 0)\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\treturn chunkGraph.getModuleId(module) === null;\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tmodule => getFullModuleName(module, context, compiler.root),\n\t\t\t\t\t\t\tcompareModulesByPreOrderIndexOrIdentifier(\n\t\t\t\t\t\t\t\tcompilation.moduleGraph\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t(module, id) => {\n\t\t\t\t\t\t\t\tconst size = usedIds.size;\n\t\t\t\t\t\t\t\tusedIds.add(`${id}`);\n\t\t\t\t\t\t\t\tif (size === usedIds.size) return false;\n\t\t\t\t\t\t\t\tchunkGraph.setModuleId(module, id);\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t[Math.pow(10, maxLength)],\n\t\t\t\t\t\t\t10,\n\t\t\t\t\t\t\tusedIds.size\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = DeterministicModuleIdsPlugin;\n"]},"metadata":{},"sourceType":"script"}