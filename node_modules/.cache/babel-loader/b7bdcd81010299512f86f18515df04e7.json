{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst Template = require(\"../Template\");\n\nconst HelperRuntimeModule = require(\"./HelperRuntimeModule\");\n\nclass CreateScriptUrlRuntimeModule extends HelperRuntimeModule {\n  constructor() {\n    super(\"trusted types\");\n  }\n  /**\n   * @returns {string} runtime code\n   */\n\n\n  generate() {\n    const {\n      compilation\n    } = this;\n    const {\n      runtimeTemplate,\n      outputOptions\n    } = compilation;\n    const {\n      trustedTypes\n    } = outputOptions;\n    const fn = RuntimeGlobals.createScriptUrl;\n\n    if (!trustedTypes) {\n      // Skip Trusted Types logic.\n      return Template.asString([`${fn} = ${runtimeTemplate.returningFunction(\"url\", \"url\")};`]);\n    }\n\n    return Template.asString([\"var policy;\", `${fn} = ${runtimeTemplate.basicFunction(\"url\", [\"// Create Trusted Type policy if Trusted Types are available and the policy doesn't exist yet.\", \"if (policy === undefined) {\", Template.indent([\"policy = {\", Template.indent([`createScriptURL: ${runtimeTemplate.returningFunction(\"url\", \"url\")}`]), \"};\", 'if (typeof trustedTypes !== \"undefined\" && trustedTypes.createPolicy) {', Template.indent([`policy = trustedTypes.createPolicy(${JSON.stringify(trustedTypes.policyName)}, policy);`]), \"}\"]), \"}\", \"return policy.createScriptURL(url);\"])};`]);\n  }\n\n}\n\nmodule.exports = CreateScriptUrlRuntimeModule;","map":{"version":3,"sources":["E:/Coding/fixl solution/work1/addtocart/node_modules/webpack/lib/runtime/CreateScriptUrlRuntimeModule.js"],"names":["RuntimeGlobals","require","Template","HelperRuntimeModule","CreateScriptUrlRuntimeModule","constructor","generate","compilation","runtimeTemplate","outputOptions","trustedTypes","fn","createScriptUrl","asString","returningFunction","basicFunction","indent","JSON","stringify","policyName","module","exports"],"mappings":"AAAA;AACA;AACA;AAEA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAD,CAA9B;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,aAAD,CAAxB;;AACA,MAAME,mBAAmB,GAAGF,OAAO,CAAC,uBAAD,CAAnC;;AAEA,MAAMG,4BAAN,SAA2CD,mBAA3C,CAA+D;AAC9DE,EAAAA,WAAW,GAAG;AACb,UAAM,eAAN;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,QAAQ,GAAG;AACV,UAAM;AAAEC,MAAAA;AAAF,QAAkB,IAAxB;AACA,UAAM;AAAEC,MAAAA,eAAF;AAAmBC,MAAAA;AAAnB,QAAqCF,WAA3C;AACA,UAAM;AAAEG,MAAAA;AAAF,QAAmBD,aAAzB;AACA,UAAME,EAAE,GAAGX,cAAc,CAACY,eAA1B;;AAEA,QAAI,CAACF,YAAL,EAAmB;AAClB;AACA,aAAOR,QAAQ,CAACW,QAAT,CAAkB,CACvB,GAAEF,EAAG,MAAKH,eAAe,CAACM,iBAAhB,CAAkC,KAAlC,EAAyC,KAAzC,CAAgD,GADnC,CAAlB,CAAP;AAGA;;AAED,WAAOZ,QAAQ,CAACW,QAAT,CAAkB,CACxB,aADwB,EAEvB,GAAEF,EAAG,MAAKH,eAAe,CAACO,aAAhB,CAA8B,KAA9B,EAAqC,CAC/C,gGAD+C,EAE/C,6BAF+C,EAG/Cb,QAAQ,CAACc,MAAT,CAAgB,CACf,YADe,EAEfd,QAAQ,CAACc,MAAT,CAAgB,CACd,oBAAmBR,eAAe,CAACM,iBAAhB,CACnB,KADmB,EAEnB,KAFmB,CAGlB,EAJa,CAAhB,CAFe,EAQf,IARe,EASf,yEATe,EAUfZ,QAAQ,CAACc,MAAT,CAAgB,CACd,sCAAqCC,IAAI,CAACC,SAAL,CACrCR,YAAY,CAACS,UADwB,CAEpC,YAHa,CAAhB,CAVe,EAef,GAfe,CAAhB,CAH+C,EAoB/C,GApB+C,EAqB/C,qCArB+C,CAArC,CAsBR,GAxBqB,CAAlB,CAAP;AA0BA;;AA/C6D;;AAkD/DC,MAAM,CAACC,OAAP,GAAiBjB,4BAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst Template = require(\"../Template\");\nconst HelperRuntimeModule = require(\"./HelperRuntimeModule\");\n\nclass CreateScriptUrlRuntimeModule extends HelperRuntimeModule {\n\tconstructor() {\n\t\tsuper(\"trusted types\");\n\t}\n\n\t/**\n\t * @returns {string} runtime code\n\t */\n\tgenerate() {\n\t\tconst { compilation } = this;\n\t\tconst { runtimeTemplate, outputOptions } = compilation;\n\t\tconst { trustedTypes } = outputOptions;\n\t\tconst fn = RuntimeGlobals.createScriptUrl;\n\n\t\tif (!trustedTypes) {\n\t\t\t// Skip Trusted Types logic.\n\t\t\treturn Template.asString([\n\t\t\t\t`${fn} = ${runtimeTemplate.returningFunction(\"url\", \"url\")};`\n\t\t\t]);\n\t\t}\n\n\t\treturn Template.asString([\n\t\t\t\"var policy;\",\n\t\t\t`${fn} = ${runtimeTemplate.basicFunction(\"url\", [\n\t\t\t\t\"// Create Trusted Type policy if Trusted Types are available and the policy doesn't exist yet.\",\n\t\t\t\t\"if (policy === undefined) {\",\n\t\t\t\tTemplate.indent([\n\t\t\t\t\t\"policy = {\",\n\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t`createScriptURL: ${runtimeTemplate.returningFunction(\n\t\t\t\t\t\t\t\"url\",\n\t\t\t\t\t\t\t\"url\"\n\t\t\t\t\t\t)}`\n\t\t\t\t\t]),\n\t\t\t\t\t\"};\",\n\t\t\t\t\t'if (typeof trustedTypes !== \"undefined\" && trustedTypes.createPolicy) {',\n\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t`policy = trustedTypes.createPolicy(${JSON.stringify(\n\t\t\t\t\t\t\ttrustedTypes.policyName\n\t\t\t\t\t\t)}, policy);`\n\t\t\t\t\t]),\n\t\t\t\t\t\"}\"\n\t\t\t\t]),\n\t\t\t\t\"}\",\n\t\t\t\t\"return policy.createScriptURL(url);\"\n\t\t\t])};`\n\t\t]);\n\t}\n}\n\nmodule.exports = CreateScriptUrlRuntimeModule;\n"]},"metadata":{},"sourceType":"script"}