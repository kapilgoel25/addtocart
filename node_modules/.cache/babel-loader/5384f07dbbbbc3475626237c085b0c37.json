{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst forEachBail = require(\"./forEachBail\");\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\n/** @typedef {{alias: string|Array<string>|false, name: string, onlyModule?: boolean}} AliasOption */\n\n\nmodule.exports = class AliasPlugin {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {AliasOption | Array<AliasOption>} options options\n   * @param {string | ResolveStepHook} target target\n   */\n  constructor(source, options, target) {\n    this.source = source;\n    this.options = Array.isArray(options) ? options : [options];\n    this.target = target;\n  }\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n\n\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    resolver.getHook(this.source).tapAsync(\"AliasPlugin\", (request, resolveContext, callback) => {\n      const innerRequest = request.request || request.path;\n      if (!innerRequest) return callback();\n      forEachBail(this.options, (item, callback) => {\n        let shouldStop = false;\n\n        if (innerRequest === item.name || !item.onlyModule && innerRequest.startsWith(item.name + \"/\")) {\n          const remainingRequest = innerRequest.substr(item.name.length);\n\n          const resolveWithAlias = (alias, callback) => {\n            if (alias === false) {\n              const ignoreObj = { ...request,\n                path: false\n              };\n              return callback(null, ignoreObj);\n            }\n\n            if (innerRequest !== alias && !innerRequest.startsWith(alias + \"/\")) {\n              shouldStop = true;\n              const newRequestStr = alias + remainingRequest;\n              const obj = { ...request,\n                request: newRequestStr,\n                fullySpecified: false\n              };\n              return resolver.doResolve(target, obj, \"aliased with mapping '\" + item.name + \"': '\" + alias + \"' to '\" + newRequestStr + \"'\", resolveContext, (err, result) => {\n                if (err) return callback(err);\n                if (result) return callback(null, result);\n                return callback();\n              });\n            }\n\n            return callback();\n          };\n\n          const stoppingCallback = (err, result) => {\n            if (err) return callback(err);\n            if (result) return callback(null, result); // Don't allow other aliasing or raw request\n\n            if (shouldStop) return callback(null, null);\n            return callback();\n          };\n\n          if (Array.isArray(item.alias)) {\n            return forEachBail(item.alias, resolveWithAlias, stoppingCallback);\n          } else {\n            return resolveWithAlias(item.alias, stoppingCallback);\n          }\n        }\n\n        return callback();\n      }, callback);\n    });\n  }\n\n};","map":{"version":3,"sources":["E:/Coding/fixl solution/work1/addtocart/node_modules/enhanced-resolve/lib/AliasPlugin.js"],"names":["forEachBail","require","module","exports","AliasPlugin","constructor","source","options","target","Array","isArray","apply","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","innerRequest","path","item","shouldStop","name","onlyModule","startsWith","remainingRequest","substr","length","resolveWithAlias","alias","ignoreObj","newRequestStr","obj","fullySpecified","doResolve","err","result","stoppingCallback"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAA3B;AAEA;;AACA;;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB,MAAMC,WAAN,CAAkB;AAClC;AACD;AACA;AACA;AACA;AACCC,EAAAA,WAAW,CAACC,MAAD,EAASC,OAAT,EAAkBC,MAAlB,EAA0B;AACpC,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeE,KAAK,CAACC,OAAN,CAAcH,OAAd,IAAyBA,OAAzB,GAAmC,CAACA,OAAD,CAAlD;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA;AAED;AACD;AACA;AACA;;;AACCG,EAAAA,KAAK,CAACC,QAAD,EAAW;AACf,UAAMJ,MAAM,GAAGI,QAAQ,CAACC,UAAT,CAAoB,KAAKL,MAAzB,CAAf;AACAI,IAAAA,QAAQ,CACNE,OADF,CACU,KAAKR,MADf,EAEES,QAFF,CAEW,aAFX,EAE0B,CAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,KAAuC;AAC/D,YAAMC,YAAY,GAAGH,OAAO,CAACA,OAAR,IAAmBA,OAAO,CAACI,IAAhD;AACA,UAAI,CAACD,YAAL,EAAmB,OAAOD,QAAQ,EAAf;AACnBlB,MAAAA,WAAW,CACV,KAAKO,OADK,EAEV,CAACc,IAAD,EAAOH,QAAP,KAAoB;AACnB,YAAII,UAAU,GAAG,KAAjB;;AACA,YACCH,YAAY,KAAKE,IAAI,CAACE,IAAtB,IACC,CAACF,IAAI,CAACG,UAAN,IAAoBL,YAAY,CAACM,UAAb,CAAwBJ,IAAI,CAACE,IAAL,GAAY,GAApC,CAFtB,EAGE;AACD,gBAAMG,gBAAgB,GAAGP,YAAY,CAACQ,MAAb,CAAoBN,IAAI,CAACE,IAAL,CAAUK,MAA9B,CAAzB;;AACA,gBAAMC,gBAAgB,GAAG,CAACC,KAAD,EAAQZ,QAAR,KAAqB;AAC7C,gBAAIY,KAAK,KAAK,KAAd,EAAqB;AACpB,oBAAMC,SAAS,GAAG,EACjB,GAAGf,OADc;AAEjBI,gBAAAA,IAAI,EAAE;AAFW,eAAlB;AAIA,qBAAOF,QAAQ,CAAC,IAAD,EAAOa,SAAP,CAAf;AACA;;AACD,gBACCZ,YAAY,KAAKW,KAAjB,IACA,CAACX,YAAY,CAACM,UAAb,CAAwBK,KAAK,GAAG,GAAhC,CAFF,EAGE;AACDR,cAAAA,UAAU,GAAG,IAAb;AACA,oBAAMU,aAAa,GAAGF,KAAK,GAAGJ,gBAA9B;AACA,oBAAMO,GAAG,GAAG,EACX,GAAGjB,OADQ;AAEXA,gBAAAA,OAAO,EAAEgB,aAFE;AAGXE,gBAAAA,cAAc,EAAE;AAHL,eAAZ;AAKA,qBAAOtB,QAAQ,CAACuB,SAAT,CACN3B,MADM,EAENyB,GAFM,EAGN,2BACCZ,IAAI,CAACE,IADN,GAEC,MAFD,GAGCO,KAHD,GAIC,QAJD,GAKCE,aALD,GAMC,GATK,EAUNf,cAVM,EAWN,CAACmB,GAAD,EAAMC,MAAN,KAAiB;AAChB,oBAAID,GAAJ,EAAS,OAAOlB,QAAQ,CAACkB,GAAD,CAAf;AACT,oBAAIC,MAAJ,EAAY,OAAOnB,QAAQ,CAAC,IAAD,EAAOmB,MAAP,CAAf;AACZ,uBAAOnB,QAAQ,EAAf;AACA,eAfK,CAAP;AAiBA;;AACD,mBAAOA,QAAQ,EAAf;AACA,WAtCD;;AAuCA,gBAAMoB,gBAAgB,GAAG,CAACF,GAAD,EAAMC,MAAN,KAAiB;AACzC,gBAAID,GAAJ,EAAS,OAAOlB,QAAQ,CAACkB,GAAD,CAAf;AAET,gBAAIC,MAAJ,EAAY,OAAOnB,QAAQ,CAAC,IAAD,EAAOmB,MAAP,CAAf,CAH6B,CAIzC;;AACA,gBAAIf,UAAJ,EAAgB,OAAOJ,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAf;AAChB,mBAAOA,QAAQ,EAAf;AACA,WAPD;;AAQA,cAAIT,KAAK,CAACC,OAAN,CAAcW,IAAI,CAACS,KAAnB,CAAJ,EAA+B;AAC9B,mBAAO9B,WAAW,CACjBqB,IAAI,CAACS,KADY,EAEjBD,gBAFiB,EAGjBS,gBAHiB,CAAlB;AAKA,WAND,MAMO;AACN,mBAAOT,gBAAgB,CAACR,IAAI,CAACS,KAAN,EAAaQ,gBAAb,CAAvB;AACA;AACD;;AACD,eAAOpB,QAAQ,EAAf;AACA,OAnES,EAoEVA,QApEU,CAAX;AAsEA,KA3EF;AA4EA;;AA9FiC,CAAnC","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst forEachBail = require(\"./forEachBail\");\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n/** @typedef {{alias: string|Array<string>|false, name: string, onlyModule?: boolean}} AliasOption */\n\nmodule.exports = class AliasPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {AliasOption | Array<AliasOption>} options options\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, options, target) {\n\t\tthis.source = source;\n\t\tthis.options = Array.isArray(options) ? options : [options];\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"AliasPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tconst innerRequest = request.request || request.path;\n\t\t\t\tif (!innerRequest) return callback();\n\t\t\t\tforEachBail(\n\t\t\t\t\tthis.options,\n\t\t\t\t\t(item, callback) => {\n\t\t\t\t\t\tlet shouldStop = false;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tinnerRequest === item.name ||\n\t\t\t\t\t\t\t(!item.onlyModule && innerRequest.startsWith(item.name + \"/\"))\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst remainingRequest = innerRequest.substr(item.name.length);\n\t\t\t\t\t\t\tconst resolveWithAlias = (alias, callback) => {\n\t\t\t\t\t\t\t\tif (alias === false) {\n\t\t\t\t\t\t\t\t\tconst ignoreObj = {\n\t\t\t\t\t\t\t\t\t\t...request,\n\t\t\t\t\t\t\t\t\t\tpath: false\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\treturn callback(null, ignoreObj);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tinnerRequest !== alias &&\n\t\t\t\t\t\t\t\t\t!innerRequest.startsWith(alias + \"/\")\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tshouldStop = true;\n\t\t\t\t\t\t\t\t\tconst newRequestStr = alias + remainingRequest;\n\t\t\t\t\t\t\t\t\tconst obj = {\n\t\t\t\t\t\t\t\t\t\t...request,\n\t\t\t\t\t\t\t\t\t\trequest: newRequestStr,\n\t\t\t\t\t\t\t\t\t\tfullySpecified: false\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\treturn resolver.doResolve(\n\t\t\t\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\t\t\t\tobj,\n\t\t\t\t\t\t\t\t\t\t\"aliased with mapping '\" +\n\t\t\t\t\t\t\t\t\t\t\titem.name +\n\t\t\t\t\t\t\t\t\t\t\t\"': '\" +\n\t\t\t\t\t\t\t\t\t\t\talias +\n\t\t\t\t\t\t\t\t\t\t\t\"' to '\" +\n\t\t\t\t\t\t\t\t\t\t\tnewRequestStr +\n\t\t\t\t\t\t\t\t\t\t\t\"'\",\n\t\t\t\t\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\t\t\t\t\t(err, result) => {\n\t\t\t\t\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\t\t\t\t\tif (result) return callback(null, result);\n\t\t\t\t\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tconst stoppingCallback = (err, result) => {\n\t\t\t\t\t\t\t\tif (err) return callback(err);\n\n\t\t\t\t\t\t\t\tif (result) return callback(null, result);\n\t\t\t\t\t\t\t\t// Don't allow other aliasing or raw request\n\t\t\t\t\t\t\t\tif (shouldStop) return callback(null, null);\n\t\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tif (Array.isArray(item.alias)) {\n\t\t\t\t\t\t\t\treturn forEachBail(\n\t\t\t\t\t\t\t\t\titem.alias,\n\t\t\t\t\t\t\t\t\tresolveWithAlias,\n\t\t\t\t\t\t\t\t\tstoppingCallback\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn resolveWithAlias(item.alias, stoppingCallback);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn callback();\n\t\t\t\t\t},\n\t\t\t\t\tcallback\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}